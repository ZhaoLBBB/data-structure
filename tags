!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASE_DIR	base.mk	/^BASE_DIR=$(shell pwd)$/;"	m
CC	base.mk	/^CC=$(CROSS_COMPILE)gcc$/;"	m
CFLAGS	base.mk	/^CFLAGS=-I$(INC) -Wall -O2$/;"	m
CHECK_LOOPS	test/rbtree-test.c	11;"	d	file:
CROSS_COMPILE	base.mk	/^CROSS_COMPILE=$/;"	m
ChallengingTest	test/vector-test.c	/^static void ChallengingTest()$/;"	f	file:
CompareChar	test/vector-test.c	/^static int CompareChar(const void *elemA, const void *elemB)$/;"	f	file:
DEBUG	base.mk	/^DEBUG=n$/;"	m
DeleteEverythingVerySlowly	test/vector-test.c	/^static void DeleteEverythingVerySlowly(struct vector *numbers)$/;"	f	file:
FreeString	test/vector-test.c	/^static void FreeString(void *elemAddr)$/;"	f	file:
INC	base.mk	/^INC=$(BASE_DIR)\/inc$/;"	m
INIT_ALLOC_SIZE	lib/vector.c	5;"	d	file:
INIT_LIST_HEAD	inc/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INTERSECT_BEGIN	test/set-test.c	7;"	d	file:
InsertPermutationOfNumbers	test/vector-test.c	/^static void InsertPermutationOfNumbers(struct vector *numbers, long n, long d)$/;"	f	file:
LDFLAGS	base.mk	/^LDFLAGS=-L$(LIB) -ldatastruct$/;"	m
LIB	base.mk	/^LIB =$(BASE_DIR)\/lib$/;"	m
LIBRARY_NAME	base.mk	/^LIBRARY_NAME=libdatastruct.a$/;"	m
LIB_OBJS	lib/Makefile	/^LIB_OBJS=${patsubst %.c,%.o,$(LIB_SRCS)}$/;"	m
LIB_SRCS	lib/Makefile	/^LIB_SRCS=${wildcard *.c}$/;"	m
LIST_HEAD	inc/list.h	28;"	d
LIST_HEAD_INIT	inc/list.h	26;"	d
LongCompare	test/vector-test.c	/^static int LongCompare(const void *vp1, const void *vp2)$/;"	f	file:
MAX_NODE	test/set-test.c	6;"	d	file:
MAX_NODES	test/list-test.c	5;"	d	file:
MemoryTest	test/vector-test.c	/^static void MemoryTest()$/;"	f	file:
NODES	test/rbtree-test.c	9;"	d	file:
NULL	inc/list.h	19;"	d
NULL	inc/rbtree.h	8;"	d
NULL	inc/vector.h	5;"	d
PERF_LOOPS	test/rbtree-test.c	10;"	d	file:
PrintChar	test/vector-test.c	/^static void PrintChar(void *elem, void *fp)$/;"	f	file:
PrintString	test/vector-test.c	/^static void PrintString(void *elemAddr, void *auxData)$/;"	f	file:
RB_BLACK	inc/rbtree_augmented.h	78;"	d
RB_CLEAR_NODE	inc/rbtree.h	37;"	d
RB_DECLARE_CALLBACKS	inc/rbtree_augmented.h	43;"	d
RB_EMPTY_NODE	inc/rbtree.h	35;"	d
RB_EMPTY_ROOT	inc/rbtree.h	32;"	d
RB_RED	inc/rbtree_augmented.h	77;"	d
RB_ROOT	inc/rbtree.h	29;"	d
SET_ERROR	inc/set.h	/^static inline  void SET_ERROR(char *fmt, ...){};$/;"	f
SET_ERROR	inc/set.h	9;"	d
SET_H_	inc/set.h	2;"	d
STRING_NODE_NUM	test/set-test.c	88;"	d	file:
SimpleTest	test/vector-test.c	/^static void SimpleTest()$/;"	f	file:
SortPermutation	test/vector-test.c	/^static void SortPermutation(struct vector *vectorToSort)$/;"	f	file:
TARGET	test/Makefile	/^TARGET=set-test rbtree-test list-test vector-test$/;"	m
TEST	base.mk	/^TEST=$(BASE_DIR)\/test$/;"	m
TestAppend	test/vector-test.c	/^static void TestAppend(struct vector *alphabet)$/;"	f	file:
TestAt	test/vector-test.c	/^static void TestAt(struct vector *alphabet)$/;"	f	file:
TestInsertDelete	test/vector-test.c	/^static void TestInsertDelete(struct vector *alphabet)$/;"	f	file:
TestReplace	test/vector-test.c	/^static void TestReplace(struct vector *alphabet)$/;"	f	file:
TestSearch	test/vector-test.c	/^static void TestSearch(struct vector *v, char ch)$/;"	f	file:
TestSortSearch	test/vector-test.c	/^static void TestSortSearch(struct vector *alphabet)$/;"	f	file:
VECTOR_H_	inc/vector.h	2;"	d
YES_OR_NO	test/vector-test.c	10;"	d	file:
_LINUX_LIST_H	inc/list.h	2;"	d
_LINUX_RBTREE_AUGMENTED_H	inc/rbtree_augmented.h	6;"	d
_LINUX_RBTREE_H	inc/rbtree.h	6;"	d
____rb_erase_color	lib/rbtree.c	/^____rb_erase_color(struct rb_node *parent, struct rb_root *root,$/;"	f	file:
__list_add	inc/list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	inc/list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	inc/list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_del_entry	inc/list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__list_splice	inc/list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
__rb_change_child	inc/rbtree_augmented.h	/^__rb_change_child(struct rb_node *old, struct rb_node *new,$/;"	f
__rb_color	inc/rbtree_augmented.h	82;"	d
__rb_erase_augmented	inc/rbtree_augmented.h	/^__rb_erase_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
__rb_erase_color	lib/rbtree.c	/^void __rb_erase_color(struct rb_node *parent, struct rb_root *root,$/;"	f
__rb_insert	lib/rbtree.c	/^__rb_insert(struct rb_node *node, struct rb_root *root,$/;"	f	file:
__rb_insert_augmented	lib/rbtree.c	/^void __rb_insert_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
__rb_is_black	inc/rbtree_augmented.h	83;"	d
__rb_is_red	inc/rbtree_augmented.h	84;"	d
__rb_parent	inc/rbtree_augmented.h	80;"	d
__rb_parent_color	inc/rbtree.h	/^	unsigned long  __rb_parent_color;$/;"	m	struct:rb_node
__rb_rotate_set_parents	lib/rbtree.c	/^__rb_rotate_set_parents(struct rb_node *old, struct rb_node *new,$/;"	f	file:
allo_func	inc/vector.h	/^	vector_alloc_func allo_func;$/;"	m	struct:vector
alloc_len	inc/vector.h	/^	int alloc_len;$/;"	m	struct:vector
augment_recompute	test/rbtree-test.c	/^static inline unsigned int augment_recompute(struct test_node *node)$/;"	f	file:
augmented	test/rbtree-test.c	/^	unsigned int augmented;$/;"	m	struct:test_node	file:
base	inc/vector.h	/^	void *base;$/;"	m	struct:vector
black_path_count	test/rbtree-test.c	/^static int black_path_count(struct rb_node *rb)$/;"	f	file:
check	test/rbtree-test.c	/^static void check(int nr_nodes)$/;"	f	file:
check_augmented	test/rbtree-test.c	/^static void check_augmented(int nr_nodes)$/;"	f	file:
check_postorder	test/rbtree-test.c	/^static void check_postorder(int nr_nodes)$/;"	f	file:
check_postorder_foreach	test/rbtree-test.c	/^static void check_postorder_foreach(int nr_nodes)$/;"	f	file:
cmp_func	inc/set.h	/^	set_cmp_func cmp_func;$/;"	m	struct:set
cmp_func	inc/vector.h	/^	vector_cmp_func   cmp_func;$/;"	m	struct:vector
cmp_int	test/set-test.c	/^static int cmp_int(struct set_node *elem1, struct set_node *elem2)$/;"	f	file:
cmp_string	test/set-test.c	/^static int cmp_string(struct set_node *elem1, struct set_node *elem2)$/;"	f	file:
container_of	inc/list.h	14;"	d
container_of	inc/rbtree.h	11;"	d
copy	inc/rbtree_augmented.h	/^	void (*copy)(struct rb_node *old, struct rb_node *new);$/;"	m	struct:rb_augment_callbacks
copy_func	inc/set.h	/^	set_copy_func copy_func;$/;"	m	struct:set
copy_func	test/set-test.c	/^static struct set_node *copy_func(struct set_node *elem)$/;"	f	file:
cur_len	inc/vector.h	/^	int cur_len;$/;"	m	struct:vector
destroy_func	inc/set.h	/^	set_destroy_func destroy_func;$/;"	m	struct:set
destroy_func	inc/vector.h	/^	vector_destroy_func destroy_func;$/;"	m	struct:vector
destroy_func	test/set-test.c	/^static void destroy_func(struct set_node *elem)$/;"	f	file:
dummy_callbacks	lib/rbtree.c	/^static const struct rb_augment_callbacks dummy_callbacks = {$/;"	v	typeref:struct:rb_augment_callbacks	file:
dummy_copy	lib/rbtree.c	/^static inline void dummy_copy(struct rb_node *old, struct rb_node *new) {}$/;"	f	file:
dummy_propagate	lib/rbtree.c	/^static inline void dummy_propagate(struct rb_node *node, struct rb_node *stop) {}$/;"	f	file:
dummy_rotate	lib/rbtree.c	/^static inline void dummy_rotate(struct rb_node *old, struct rb_node *new) {}$/;"	f	file:
elem_size	inc/vector.h	/^	int elem_size;$/;"	m	struct:vector
erase	test/rbtree-test.c	/^static inline void erase(struct test_node *node, struct rb_root *root)$/;"	f	file:
erase_augmented	test/rbtree-test.c	/^static void erase_augmented(struct test_node *node, struct rb_root *root)$/;"	f	file:
g_error_count	test/rbtree-test.c	/^static int g_error_count = 0;$/;"	v	file:
init	test/rbtree-test.c	/^static void init(void)$/;"	f	file:
init_len	inc/vector.h	/^	int init_len;$/;"	m	struct:vector
insert	test/rbtree-test.c	/^static void insert(struct test_node *node, struct rb_root *root)$/;"	f	file:
insert_augmented	test/rbtree-test.c	/^static void insert_augmented(struct test_node *node, struct rb_root *root)$/;"	f	file:
is_red	test/rbtree-test.c	/^static int is_red(struct rb_node *rb)$/;"	f	file:
kEvenLargerPrime	test/vector-test.c	/^static const long kEvenLargerPrime = 3021377;$/;"	v	file:
kLargePrime	test/vector-test.c	/^static const long kLargePrime = 1398269;$/;"	v	file:
key	test/rbtree-test.c	/^	unsigned int key;$/;"	m	struct:test_node	file:
kool_list	test/list-test.c	/^struct kool_list {$/;"	s	file:
list	test/list-test.c	/^    struct list_head list;$/;"	m	struct:kool_list	typeref:struct:kool_list::list_head	file:
list_add	inc/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	inc/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	inc/list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	inc/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	inc/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	inc/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	inc/list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	inc/list.h	346;"	d
list_first_entry	inc/list.h	357;"	d
list_first_entry_or_null	inc/list.h	379;"	d
list_for_each	inc/list.h	406;"	d
list_for_each_entry	inc/list.h	444;"	d
list_for_each_entry_continue	inc/list.h	480;"	d
list_for_each_entry_continue_reverse	inc/list.h	494;"	d
list_for_each_entry_from	inc/list.h	507;"	d
list_for_each_entry_from_reverse	inc/list.h	520;"	d
list_for_each_entry_reverse	inc/list.h	455;"	d
list_for_each_entry_safe	inc/list.h	531;"	d
list_for_each_entry_safe_continue	inc/list.h	547;"	d
list_for_each_entry_safe_from	inc/list.h	563;"	d
list_for_each_entry_safe_reverse	inc/list.h	578;"	d
list_for_each_prev	inc/list.h	414;"	d
list_for_each_prev_safe	inc/list.h	433;"	d
list_for_each_safe	inc/list.h	423;"	d
list_head	inc/list.h	/^struct list_head {$/;"	s
list_is_last	inc/list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	inc/list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_last_entry	inc/list.h	368;"	d
list_move	inc/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	inc/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_next_entry	inc/list.h	390;"	d
list_prepare_entry	inc/list.h	468;"	d
list_prev_entry	inc/list.h	398;"	d
list_replace	inc/list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	inc/list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_rotate_left	inc/list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f
list_safe_reset_next	inc/list.h	596;"	d
list_splice	inc/list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	inc/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	inc/list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	inc/list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
main	test/list-test.c	/^int main(int argc, char **argv){$/;"	f
main	test/rbtree-test.c	/^int  main(int argc, char *argv[])$/;"	f
main	test/set-test.c	/^int main(int argc, char **argv)$/;"	f
main	test/vector-test.c	/^int main(int ignored, char **alsoIgnored) $/;"	f
name	test/set-test.c	/^	char *name;$/;"	m	struct:set_string	file:
name1	test/set-test.c	/^char *name1[5] = {"gigi", "fifi", "lili", "kiki", "lili"};$/;"	v
name1	test/set-test.c	/^char *name1[5] = {"lili", "hihi", "jiji", "fifi", "popo"};$/;"	v
next	inc/list.h	/^	struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	test/set-test.c	/^	struct set_node node;$/;"	m	struct:set_int	typeref:struct:set_int::set_node	file:
nodes	test/rbtree-test.c	/^static struct test_node nodes[NODES];$/;"	v	typeref:struct:test_node	file:
num	inc/set.h	/^	unsigned  long num;$/;"	m	struct:set
prev	inc/list.h	/^	struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
propagate	inc/rbtree_augmented.h	/^	void (*propagate)(struct rb_node *node, struct rb_node *stop);$/;"	m	struct:rb_augment_callbacks
rb	test/rbtree-test.c	/^	struct rb_node rb;$/;"	m	struct:test_node	typeref:struct:test_node::rb_node	file:
rb_augment_callbacks	inc/rbtree_augmented.h	/^struct rb_augment_callbacks {$/;"	s
rb_color	inc/rbtree_augmented.h	85;"	d
rb_entry	inc/rbtree.h	30;"	d
rb_entry_safe	inc/rbtree.h	69;"	d
rb_erase	lib/rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_erase_augmented	inc/rbtree_augmented.h	/^rb_erase_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
rb_first	lib/rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_first_postorder	lib/rbtree.c	/^struct rb_node *rb_first_postorder(const struct rb_root *root)$/;"	f
rb_insert_augmented	inc/rbtree_augmented.h	/^rb_insert_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
rb_insert_color	lib/rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	inc/rbtree_augmented.h	87;"	d
rb_is_red	inc/rbtree_augmented.h	86;"	d
rb_last	lib/rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	inc/rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_left_deepest_node	lib/rbtree.c	/^static struct rb_node *rb_left_deepest_node(const struct rb_node *node)$/;"	f	file:
rb_link_node	inc/rbtree.h	/^static inline void rb_link_node(struct rb_node *node, struct rb_node *parent,$/;"	f
rb_next	lib/rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_next_postorder	lib/rbtree.c	/^struct rb_node *rb_next_postorder(const struct rb_node *node)$/;"	f
rb_node	inc/rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	inc/rbtree.h	/^struct rb_node {$/;"	s
rb_parent	inc/rbtree.h	27;"	d
rb_prev	lib/rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_red_parent	lib/rbtree.c	/^static inline struct rb_node *rb_red_parent(struct rb_node *red)$/;"	f	file:
rb_replace_node	lib/rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new,$/;"	f
rb_right	inc/rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	inc/rbtree.h	/^struct rb_root {$/;"	s
rb_set_black	lib/rbtree.c	/^static inline void rb_set_black(struct rb_node *rb)$/;"	f	file:
rb_set_parent	inc/rbtree_augmented.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_parent_color	inc/rbtree_augmented.h	/^static inline void rb_set_parent_color(struct rb_node *rb,$/;"	f
rbtree_postorder_for_each_entry_safe	inc/rbtree.h	91;"	d
root	inc/set.h	/^	struct rb_root root;$/;"	m	struct:set	typeref:struct:set::rb_root
root	test/rbtree-test.c	/^static struct rb_root root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
rotate	inc/rbtree_augmented.h	/^	void (*rotate)(struct rb_node *old, struct rb_node *new);$/;"	m	struct:rb_augment_callbacks
set	inc/set.h	/^struct set {$/;"	s
set_cmp_func	inc/set.h	/^typedef int (*set_cmp_func)(struct set_node *elem1,struct set_node *elem2);$/;"	t
set_copy_func	inc/set.h	/^typedef struct set_node *(*set_copy_func)(struct set_node *elem);$/;"	t	typeref:struct:set_copy_func
set_destroy_func	inc/set.h	/^typedef void (*set_destroy_func)(struct set_node *elem);$/;"	t
set_difference	lib/set.c	/^int set_difference(struct set *setd,struct  set *set1,struct  set *set2)$/;"	f
set_entry	inc/set.h	38;"	d
set_for_each	inc/set.h	39;"	d
set_for_each_reverse	inc/set.h	42;"	d
set_init	inc/set.h	/^static inline void set_init(struct set *set, set_cmp_func cmp_func, set_copy_func copy_func, set_destroy_func destroy_func)$/;"	f
set_insert	lib/set.c	/^int set_insert(struct set *set, struct set_node *node)$/;"	f
set_int	test/set-test.c	/^struct set_int{$/;"	s	file:
set_intersection	lib/set.c	/^int set_intersection(struct set *setu, struct  set *set1, struct set *set2)$/;"	f
set_is_equal	lib/set.c	/^int set_is_equal(struct set *set1, struct set *set2)$/;"	f
set_is_member	lib/set.c	/^int set_is_member(struct set *set, struct set_node *node)$/;"	f
set_is_subset	lib/set.c	/^int set_is_subset(struct set *set1,struct  set *set2)$/;"	f
set_node	inc/set.h	13;"	d
set_remove	lib/set.c	/^int set_remove(struct set *set, struct set_node *node)$/;"	f
set_remove_destroy	lib/set.c	/^int set_remove_destroy(struct set *set, struct set_node *node)$/;"	f
set_string	test/set-test.c	/^struct set_string{$/;"	s	file:
set_union	lib/set.c	/^int set_union(struct set *setu, struct set *set1,struct  set *set2)$/;"	f
string_copy_func	test/set-test.c	/^static struct set_node *string_copy_func(struct set_node *elem)$/;"	f	file:
string_destroy_func	test/set-test.c	/^static void string_destroy_func(struct set_node *elem)$/;"	f	file:
test_node	test/rbtree-test.c	/^struct test_node {$/;"	s	file:
test_set_int	test/set-test.c	/^static void test_set_int(void)$/;"	f	file:
val	test/list-test.c	/^    int val;$/;"	m	struct:kool_list	file:
val	test/rbtree-test.c	/^	unsigned int val;$/;"	m	struct:test_node	file:
val	test/set-test.c	/^	int val;$/;"	m	struct:set_int	file:
vector	inc/vector.h	/^struct vector {$/;"	s
vector_Nth	lib/vector.c	/^void *vector_Nth(const struct vector *vector, int pos)$/;"	f
vector_Nth_raw	lib/vector.c	/^static void *vector_Nth_raw(const struct vector *vector, int pos)$/;"	f	file:
vector_alloc_func	inc/vector.h	/^typedef void *(*vector_alloc_func)(unsigned int size);$/;"	t
vector_append	lib/vector.c	/^int vector_append(struct vector *vector, const void *data)$/;"	f
vector_cmp_func	inc/vector.h	/^typedef int (*vector_cmp_func)(const void *data1, const void *data2);$/;"	t
vector_delete	lib/vector.c	/^void vector_delete(struct vector *vector, int pos)$/;"	f
vector_destroy_func	inc/vector.h	/^typedef void (*vector_destroy_func)(void *data);$/;"	t
vector_dispose	lib/vector.c	/^void vector_dispose(struct vector *vector)$/;"	f
vector_growth	lib/vector.c	/^static int vector_growth(struct vector *vector)$/;"	f	file:
vector_index	lib/vector.c	/^static int vector_index(const struct vector *vector, void *pos)$/;"	f	file:
vector_insert	lib/vector.c	/^int vector_insert(struct vector *vector, const void *data, int pos)$/;"	f
vector_length	lib/vector.c	/^int vector_length(struct vector *vector)$/;"	f
vector_map	lib/vector.c	/^int vector_map(struct vector *vector, vector_map_func map_func, void *aux_data)$/;"	f
vector_map_func	inc/vector.h	/^typedef void (*vector_map_func)(void *data, void *aux_data);$/;"	t
vector_new	lib/vector.c	/^int vector_new(struct vector *vector, int elem_size,  vector_destroy_func destroy_func, int init_size)$/;"	f
vector_replace	lib/vector.c	/^int vector_replace(struct vector *vector, const void *data, int pos)$/;"	f
vector_search	lib/vector.c	/^int vector_search(const struct vector *vector, const void *key, vector_cmp_func cmp_func, int start_index, int is_sorted)$/;"	f
vector_shift	lib/vector.c	/^static void vector_shift(struct vector *vector, int pos, int delta)$/;"	f	file:
vector_sort	lib/vector.c	/^void vector_sort(struct vector *vector, vector_cmp_func cmp_func)$/;"	f
